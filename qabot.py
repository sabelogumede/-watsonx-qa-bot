from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA

import gradio as gr
from typing import Any, List

import os
from dotenv import load_dotenv

load_dotenv()

WATSONX_API_KEY = os.getenv("WATSONX_API_KEY")
WATSONX_PROJECT_ID = os.getenv("WATSONX_PROJECT_ID")
# WATSONX_API_REGION = os.getenv("WATSONX_API_REGION") # if you decided to use it

# Ensure the variables are set, or handle their absence
if not WATSONX_API_KEY or not WATSONX_PROJECT_ID:
    raise ValueError("WATSONX_API_KEY and WATSONX_PROJECT_ID must be set in the .env file.")

# You can use this section to suppress warnings generated by your code:
def warn(*args: Any, **kwargs: Any) -> None:
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

## LLM function (was missing)
def get_llm():
    llm_params = {
        GenParams.DECODING_METHOD: "greedy",
        GenParams.MAX_NEW_TOKENS: 1000,
        GenParams.TEMPERATURE: 0.1,
        GenParams.TOP_P: 0.1,
        GenParams.REPETITION_PENALTY: 1.1,
    }
    
    llm = WatsonxLLM(
        model_id="meta-llama/llama-2-70b-chat",
        project_id=WATSONX_PROJECT_ID,
        params=llm_params,
        # api_key=WATSONX_API_KEY, # LangChain's IBM integration might pick this up automatically or require it explicitly. Check docs.
    )
    return llm

# Document loader
def document_loader(file_path: str) -> List[Any]:
    loader = PyPDFLoader(file_path)
    loaded_document = loader.load()
    return loaded_document

## Text splitter
def text_splitter(data: List[Any]) -> List[Any]:
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks

## Embedding model
def watsonx_embedding():
    embed_params = {
        EmbedTextParamsMetaNames.TRUNCATE_INPUT_TOKENS: 3,
        EmbedTextParamsMetaNames.RETURN_OPTIONS: {"input_text": True},
    }
    watsonx_embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        project_id=WATSONX_PROJECT_ID,
        params=embed_params,
        # api_key=WATSONX_API_KEY,
    )
    return watsonx_embedding

## Vector db
def vector_database(chunks: List[Any]):
    embedding_model = watsonx_embedding()
    vectordb = Chroma.from_documents(chunks, embedding_model)
    return vectordb  

## Retriever
def retriever(file_path: str):
    splits = document_loader(file_path)
    chunks = text_splitter(splits)
    vectordb = vector_database(chunks)
    retriever = vectordb.as_retriever()
    return retriever

## QA Chain
def retriever_qa(file_path: str, query: str) -> str:
    llm = get_llm()
    retriever_obj = retriever(file_path)
    qa = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=retriever_obj,
        return_source_documents=True
    )
    response = qa.invoke({"query": query})
    return response['result']

# Create Gradio interface
rag_application = gr.Interface(
    fn=retriever_qa,
    allow_flagging="manual",
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),  # Drag and drop file upload
        gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="Response"),
    title="PDF QA Bot with RAG (Watsonx.ai)",
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the provided document."
)

# Launch the app
if __name__ == "__main__":
    rag_application.launch(server_name="0.0.0.0", server_port=7860)